buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.6.6'
        classpath("de.jjohannes.gradle:extra-java-module-info:0.15")
    }
}
plugins {
	id 'application'
    id 'java'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.10'
}
apply plugin: 'io.github.fvarrui.javapackager.plugin'
apply plugin: 'de.jjohannes.extra-java-module-info'

// force gradle to add dependencies to the modulepath instead of the classpath in eclipse
plugins.withType(JavaPlugin).configureEach {
    java {
        modularity.inferModulePath = true
    }
}

// JavaFX version
javafx {
    version = "18"
    modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.web', 'javafx.swing' ]
}

// Application properties
version = '1.0'
group = 'com.smsbr.desktop'
applicationName = 'smsbr-desktop-app'
description = 'Desktop application used to view files generated by the famous Android App "SMS Backup & Restore"'
mainClassName   = 'com.smsbr.desktop.app.Launcher'
compileJava.options.encoding = 'UTF-8'

project.repositories {
    mavenCentral()
}
project.sourceSets {
    main {
        java.srcDir('src/main/java')
        resources.srcDir('src/main/resources')
    }
    test {
    	java.srcDir('src/test/java')
        resources.srcDir('src/test/resources')
    }
    functest {
    	java.srcDir('src/functest/java')
    	resources.srcDir('src/functest/resources')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
project.dependencies {
	implementation         group: 'commons-io',                     name: 'commons-io',             version: '2.6'
	implementation         group: 'org.apache.commons',             name: 'commons-lang3',          version: '3.9'
	implementation         group: 'com.googlecode.libphonenumber',  name: 'libphonenumber',         version: '8.9.9'
	implementation         group: 'org.jsoup',                      name: 'jsoup',                  version: '1.15.2'
	implementation         group: 'com.vdurmont',                   name: 'emoji-java',             version: '5.1.1'
	implementation 	       group: 'org.json',                       name: 'json',                   version: '20170516'
	
	testImplementation     group: 'org.junit.jupiter',              name: 'junit-jupiter',          version: '5.8.2'
	testImplementation     group: 'org.assertj',                    name: 'assertj-core',           version: '3.13.2'
	
	functestImplementation group: 'org.apache.commons',             name: 'commons-lang3',          version: '3.9'
	functestImplementation group: 'commons-io',                     name: 'commons-io',             version: '2.6'
	functestImplementation group: 'com.googlecode.libphonenumber',  name: 'libphonenumber',         version: '8.9.9'
	functestImplementation group: 'org.jsoup',                      name: 'jsoup',                  version: '1.15.2'
	functestImplementation group: 'com.vdurmont',                   name: 'emoji-java',             version: '5.1.1'
	functestImplementation group: 'org.json',                       name: 'json',                   version: '20170516'
	
	functestImplementation group: 'org.junit.jupiter',              name: 'junit-jupiter',          version: '5.8.2'
	functestImplementation group: 'org.assertj',                    name: 'assertj-core',           version: '3.13.2'
	functestImplementation group: 'org.testfx',                     name: 'testfx-core',            version: '4.0.16-alpha'
	functestImplementation group: 'org.testfx',                     name: 'testfx-junit5',          version: '4.0.16-alpha'

	functestImplementation group: 'org.hamcrest',                   name: 'hamcrest-library',       version: '2.2'
}

// Workaround: Modify JARs with no "Automatic-Module-Name" in their MANIFEST to register them as regular modules
extraJavaModuleInfo {
    automaticModule('libphonenumber-8.9.9.jar', 'libphonenumber')
    automaticModule('emoji-java-5.1.1.jar', 'emojijava')
    automaticModule('json-20170516.jar', 'json')
}
configurations {
    functestImplementation.extendsFrom implementation
    functestRuntimeOnly.extendsFrom runtimeOnly
}
// Workaround for gradle version > 7.0
processResources() {
    duplicatesStrategy = 'INCLUDE'
}
processTestResources() {
    duplicatesStrategy = 'INCLUDE'
}
processFunctestResources() {
    duplicatesStrategy = 'INCLUDE'
}
eclipse {
    classpath {
        plusConfigurations+=[configurations.functestCompileClasspath]
    } 
}
application {
	mainModule = 'com.smsbr.desktop'
	mainClass = 'com.smsbr.desktop.app.Launcher'
}
ant.propertyfile(file: "src/main/resources/com/smsbr/desktop/app/version.properties") {
        entry( key: "version", value: "${version}")
        entry( key: "build", value: getTimestamp())
}
def getTimestamp() {
    def date = new Date()
    return date.format('yyyyMMdd-HHmm')
}

jar {
    manifest {
        attributes 'Main-Class': 'com.smsbr.desktop.app.Launcher'
    }
    /*
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    */
    duplicatesStrategy = 'EXCLUDE'
}
test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
task funcTest(type: Test) {
    useJUnitPlatform()
    description = "Run functional tests"
    group = "verification"
    testClassesDirs = sourceSets.functest.output.classesDirs
    classpath = sourceSets.functest.runtimeClasspath
}
task packageMyApp(type: io.github.fvarrui.javapackager.gradle.PackageTask, dependsOn: build) {
    displayName = 'SMS Backup & Restore - Desktop App'
    mainClass = 'com.smsbr.desktop.app.Launcher'
    licenseFile = file("${projectDir}/LICENSE.txt")
    bundleJre = true
    generateInstaller = true
    administratorRequired = false
    additionalModules = [ 'javafx.controls', 'javafx.web', 'javafx.swing', 'libphonenumber', 'emojijava', 'org.json' ]
    additionalModulePaths = [file('D:/Java/javafx-sdk-18.0.1/lib'), file('build/smsbr-desktop/libs')]
    jreMinVersion = 18
    jdkPath = file('D:/Java/openjdk-18.0.1.1_windows-x64_bin/jdk-18.0.1.1')
    //packagingJdk = file('D:/Java/openjdk-18.0.1.1_windows-x64_bin/jdk-18.0.1.1')
    //jrePath = file('D:/Java/openjdk-18.0.1.1_windows-x64_bin/jdk-18.0.1.1')
    platform = 'windows'
    winConfig {
    }
}